openapi: 3.0.0
info:
  title: Recipes API
  description: API for recipes project. <br /> Writen by Lidor Ashtamker & Chen Kolely.
  version: '1.2'
  contact:
    email: lidorash@post.bgu.ac.il
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
# Added by API Auto Mocking Plugin
- description: SwaggerHub API Auto Mocking
  url: https://virtserver.swaggerhub.com/LidorAsh/RecipeIdeas/1.2
# local:
- url: "http://127.0.0.1:3000"
  description: LocalHost
# remote:
- url: "https://recipeideas.cs.bgu.ac.il"
  description: Remote Server
tags:
- name: Auth
  description: All authentication related routes
- name: Users
  description: All the user's personal app info
- name: Recipes
  description: All reciepes general info
paths:
  /register:
    post:
      tags:
      - Auth
      summary: A new user from the client is added to the server
      description: A JSON object contains all the details about the new user.
      requestBody:
        description: Inventory item to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "201":
          description: A new user has been added
        "400":
          description: wrong input parameters
  /login:
    post:
      tags:
      - Auth
      summary: Login an exist user
      description: An exist user login to the system
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginScheme'
        required: true
      responses:
        "200":
          description: |
            User was found in the DB and authenitcated successfully. The session ID is returned in a cookie named `session`.  You should include this cookie in subsequent requests
          headers:
            Set-Cookie:
              style: simple
              explode: false
              schema:
                type: string
                example: session=87s97sdhgf279293f8w0e9
        "401":
          description: Authentication failed
  /logout:
    post:
      tags:
        - Auth
      summary: logout a user from the system and delete his cookie
      responses:
        "200":
          description: "the user has ben successfully logged out"
  /users/favorites:
    get:
      tags:
      - Users
      summary: Return the favorite recipes that were saved by user
      description: Get an array of recipes that were saved by a specific user
      responses:
        "200":
          description: data about the user's favorites recipes returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
        "401":
          description: user is not authorized
      security:
        - cookieAuth: []
    post:
      tags:
      - Users
      summary: save recipe in the favorites list of a user
      description: save recipe in the favorites list of a user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                recipeId:
                  type: string
                  description: reciepe's id which the user saved
                  example: 716429
      responses:
        "200":
          description: The Recipe successfully saved as favorite
        "401":
          description: user is not authorized
      security:
        - cookieAuth: []
        
  /users/favoritesId:
    get:
      tags:
      - Users
      summary: Return the ID's of favorite recipes that were saved by user
      description: Get an array of recipes ID's that were saved by a specific user
      responses:
        "200":
          description: data about the user's favorites recipes ID's returned
          content:
            application/json:
              schema:
                type: array
                items: 
                  type: string
                  example: 632075
        "401":
          description: user is not authorized
      security:
        - cookieAuth: []
          
  /users/watched:
    get:
      tags:
      - Users
      summary: Return the watched id's recipes that were watched by the user
      description: Get an array of recipes id's that were watched by a specific user
      responses:
        "200":
          description: data about the user's watched recipes id's returned
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: 632075
                    
        "401":
          description: user is not authorized
      security:
        - cookieAuth: []
        
  /users/lastViewedRecipes:
    get:
      tags:
      - Users
      summary: Return the 3 last watched recipes that were watched by the user
      description: Get an array of recipes that were watched by a specific user
      responses:
        "200":
          description: data about the user's last watched recipes returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
        "401":
          description: user is not authorized
      security:
        - cookieAuth: []

  /users/myRecipes:
    get:
      tags:
      - Users
      summary: Return the recipes that were added by the user
      description: Get an array of recipes that were added by a specific user
      responses:
        "200":
          description: data about the user's owned recipes returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
        "401":
          description: user is not authorized
      security:
        - cookieAuth: []
     
    post:
      tags:
      - Users
      summary: save recipe in the owned recipes list of a user
      description: save recipe in the owned recipes list of a user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: reciepe's name which the user saved
                  example: Cookies
                readyInMinutes:
                  type: integer
                  description: reciepe's time to make
                  example: 30
                image:
                  type: string
                  description: picture of the recipe
                  example: https://static.fanpage.it/wp-content/uploads/sites/22/2022/02/Chocolate-chip-cookies-14.jpg
                vegan: 
                  type: boolean
                  description: is the recipe for vegan?
                  example: false
                vegetarian:
                  type: boolean
                  description: is the recipe for vegetarian?
                  example: true
                glutenFree:
                  type: boolean
                  description: is the recipe gluten free?
                  example: false
                ingredients:
                  type: string
                  description: ingredients of the recipe
                  example: 1 milk, 3 eggs, 1 flour
                instructions:
                  type: string
                  description: instructions of the recipe
                  example: just do it  
                servings:
                  type: integer
                  description: number of servings of the recipe
                  example: 10       
      responses:
        "200":
          description: The Recipe successfully added to the list
        "401":
          description: user is not authorized
      security:
        - cookieAuth: []
        
  /users/familyRecipes:
    get:
      tags:
      - Users
      summary: Return the family recipes of the user
      description: Get an array of the family recipes of a specific user
      responses:
        "200":
          description: data about the user's family recipes returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
        "401":
          description: user is not authorized
      security:
        - cookieAuth: []

  /recipes/{recipeId}:
    get:
      tags:
      - Recipes
      summary: Return preview details on recipe by his ID
      description: Return preview details on recipe by his ID
      parameters:
      - name: recipeId
        in: path
        description: recipe's id
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: data about the recipe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipePreview'
        "404":
          description: recipeId is not exists
  /recipes/random:
    get:
      tags:
      - Recipes
      summary: Return preview details on 3 random recipes
      description: Return preview details on 3 random recipes
      responses:
        "200":
          description: data about the recipe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipePreview'
        "404":
          description: not found

  /recipes/search/query/{searchQuery}/amount/{num}:
    post:
      tags:
      - Recipes
      summary: Search for recipes in API
      description: Search for recipes in API
      parameters:
      - name: searchQuery
        in: path
        description: query in words
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: num
        in: path
        description: number of results
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Parameters for query (can be cuisine/diet/intolerance)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryBodyParams'
        required: false
      responses:
        "200":
          description: data about the recipe
          
        "404":
          description: not found

components:
  securitySchemes:
    cookieAuth:  # arbitrary name for the security scheme; will be used in the "security" key later
      type: apiKey
      in: cookie
      name: session  # cookie name
  schemas:
    User:
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username conatins between 3 to 8 letters only
          example: my_name
        firstname:
          type: string
          description: user's first name
          example: my_first_name
        lastname:
          type: string
          description: user's last name
          example: my_last_name
        country:
          type: string
          description: user's country
          example: Israel
        password:
          maxLength: 10
          minLength: 5
          type: string
          description: password conatins between 5 to 10 chars, at least one of them
            is a number and a special char
          format: password
          example: my_name@12
        email:
          pattern: email
          type: string
          description: user's email
          example: my_name12@gmail.com
        # image-url:
        #   pattern: URL
        #   type: string
        #   description: URL for the user's image
        #   example: https://cloudinary.com/
      description: Model containing user info
    LoginScheme:
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username conatins letters only
        password:
          maxLength: 10
          minLength: 5
          description: password conatins at least one number and one special char
          format: password
      example:
        username: my_name
        password: my_name@12
    RecipePreview:
      type: object
      properties:
        id:
          type: integer
          description: recipe identifier
          example: 102
        title:
          type: string
          description: recipe name
          example: Simple Macaroni and Cheese
        image:
          type: string
          description: recipe image
          format: URL
          example: https://spoonacular.com/recipeimages/655455-566x370.jpg
        readyInMinutes:
          type: integer
          description: the time takes to make this recipe
          example: 45
        popularity:
          type: integer
          description: how many likes got this recipe
          example: 5987
        vegetarian:
          type: boolean
          description: indication if the recipe is vegetarian
          example: false
        vegan:
          type: boolean
          description: indication if the recipe is vegan
          example: false
        glutenFree:
          type: boolean
          description: indication if the recipe is gluten free
          example: false
    QueryBodyParams:
      type: object
      properties:
        cuisine:
          type: string
          description: cuisine of recipe
          example: italian
        diet:
          type: string
          description: diet kind of recipe
          example: vegetarian
        intolerances:
          type: string
          description: intolerance kind of recipe
          example: Gluten